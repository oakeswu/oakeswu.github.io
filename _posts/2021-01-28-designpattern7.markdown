---
layout:     post
title:      "设计模式(七) -- 六大原则"
subtitle:   ""
date:       2021-01-28
author:     "OakesWu"
header-img: "img/post-bg-2015.jpg"
tags:
    - 设计模式
---

#原则内容
- 开闭原则（对扩展开放，对修改关闭）

我们时常遇到面向接口编程，多态策略模式等，这些正是开闭原则的忠实践行者。当要写新需求或者新的功能时不用去修改原来的对象，而是增加新的类。例子，我们需要下线一张表，并且表的信息转由接口获取，此时新增一个接口实现类虽然代码量会多一些，但是会比直接修改原始类要安全许多。

- 里氏代换原则（父类使用的地方可以直接换成子类运行）

这就是为什么我们时常用接口或抽象作为参数，因为具体的执行时由子类去实现的。并且子类尽量不要去直接去修改父类已实现的通用方法。

- 依赖倒转原则（依赖于抽象而不是具体）

依赖倒转原则的中心思想是面向接口编程，外部依赖的是抽象而不是具体实现。

- 接口隔离原则（接口耦合控制）

尽量减少接口之间的耦合，降低不必要接口之间的调用。

- 单一原则（类或方法负责一项职责）

类或者方法应该尽量只实现一个功能或者一个职责，当其他类或方法修改时尽量不影响其他类或者方法。

- 迪米特原则（最少知道原则）

一个类或对象应该对其他类或对象最少了解，可以通过中介类去转发调用，但是过于使用会造成中间类臃肿的问题

# 思考
其实设计模式六大原则我们看下来主要就是解耦与便利，像迪米特原则，单一原则，接口隔离原则都侧重于类或方法间的解耦，而开闭，里氏代换都是安全与便利。